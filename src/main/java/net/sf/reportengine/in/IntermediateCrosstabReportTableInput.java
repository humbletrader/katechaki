/**
 * Copyright (C) 2006 Dragos Balan (dragos.balan@gmail.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * 
 */
package net.sf.reportengine.in;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.util.Arrays;
import java.util.List;

import net.sf.reportengine.core.ReportEngineRuntimeException;
import net.sf.reportengine.core.steps.crosstab.IntermComputedDataList;
import net.sf.reportengine.core.steps.crosstab.IntermComputedTotalsList;
import net.sf.reportengine.core.steps.crosstab.IntermOriginalDataColsList;
import net.sf.reportengine.core.steps.crosstab.IntermOriginalGroupValuesList;
import net.sf.reportengine.core.steps.crosstab.IntermediateReportRow;
import net.sf.reportengine.util.ReportIoUtils;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * <p>
 * Intermediate input. (only for internal use)
 * </p>
 * 
 * <p>
 * Use this input to read temporary files generated by report engine containing
 * serialized values of the initial input
 * </p>
 * 
 * @author dragos balan (dragos dot balan at gmail dot com)
 * @since 0.4
 */
public class IntermediateCrosstabReportTableInput extends AbstractTableInput {

    private static final Logger LOGGER = LoggerFactory.getLogger(IntermediateCrosstabReportTableInput.class);
    
    
    /**
     * input containing serialized intermediate objects
     */
    private ObjectInputStream intermCtLinesInputStream;

    /**
     * the next unprocessed line
     */
    private IntermediateReportRow nextRawLine;

    
    /**
     * 
     * @param intermedFile  the file containing serialized data produced by the IntermediateAlgorithm
     */
    public IntermediateCrosstabReportTableInput(File intermedFile) {
        try {
            this.intermCtLinesInputStream = new ObjectInputStream(ReportIoUtils.createInputStreamFromFile(intermedFile));
        } catch (FileNotFoundException fnfExc) {
            throw new TableInputException(fnfExc);
        } catch (IOException e) {
            throw new TableInputException(e);
        }
    }

    @Override
    public void open() {
        super.open();
        if (intermCtLinesInputStream == null)
            throw new IllegalStateException("Intermediate input stream is null");
        nextRawLine = readNextRow();
        LOGGER.debug("Intermediate report input opened successfuly");
    }

    @Override
    public void close() {
        nextRawLine = null;
        try {
            intermCtLinesInputStream.close();
            intermCtLinesInputStream = null;
        } catch (IOException e) {
            throw new TableInputException(e);
        } finally {
            super.close();
        }
    }

    /*
     * (non-Javadoc)
     * 
     * @see net.sf.reportengine.in.AbstractReportInput#nextRow()
     */
    public List<Object> next() {
        LOGGER.trace("requesting next intermediate row");
        List<Object> result = null;
        if (hasNext()) {
            // TODO: try to return directly a list
            Object[] temp = transformIntermediateCrosstabLine(nextRawLine);
            result = Arrays.asList(temp);
            // prepare the next line
            if (!nextRawLine.isLast()) {
                nextRawLine = readNextRow();
            } else {
                nextRawLine = null;
            }
        }
        LOGGER.debug("nextRow detected {} ", result);
        return result;
    }

    /*
     * (non-Javadoc)
     * 
     * @see net.sf.reportengine.in.AbstractReportInput#hasMoreRows()
     */
    public boolean hasNext() {
        return nextRawLine != null;
    }

    /**
     * 
     * @return
     */
    private IntermediateReportRow readNextRow() {
        IntermediateReportRow result = null;
        try {
            result = (IntermediateReportRow) intermCtLinesInputStream.readObject();
        } catch (ClassNotFoundException e) {
            throw new ReportEngineRuntimeException(e);
        } catch (IOException e) {
            throw new ReportEngineRuntimeException(e);
        }
        return result;
    }

    /**
     * the contract is that result[0] is an instance of IntermGroupValuesList
     * result[1] is an instance of OriginalDataValueList result[2] is an
     * instance of IntermComputedDataList result[3] an instance of
     * IntermComputedTotalsList
     * 
     * @param intermRow
     * @return
     */
    private Object[] transformIntermediateCrosstabLine(IntermediateReportRow intermRow) {
        LOGGER.debug("transforming line: {}", intermRow);
        Object[] result = null;

        if (intermRow != null) {
            result = new Object[4];// TODO: see if you can put a better type of
                                   // list here (immutable or unmodifiable or
                                   // fized size)
            IntermOriginalGroupValuesList intermGroupValues = intermRow.getIntermGroupValuesList();
            if (intermGroupValues != null) {
                result[0] = intermGroupValues;
            }

            IntermOriginalDataColsList intermOrigDataColValues = intermRow.getIntermOriginalDataValuesList();
            if (intermOrigDataColValues != null) {
                result[1] = intermOrigDataColValues;
            }

            IntermComputedDataList intermDataList = intermRow.getIntermComputedDataList();
            if (intermDataList != null) {
                result[2] = intermDataList;
            }

            IntermComputedTotalsList intermTotals = intermRow.getIntermComputedTotalsList();
            if (intermTotals != null) {
                result[3] = intermTotals;
            }
        }
        return result;
    }
}